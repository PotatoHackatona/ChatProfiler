/**
 * API Crédito Pessoal - Demo
 * API para tratamento de propostas de crédito pessoal utilizada para estudos do fluxo de crédito da Portocred
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/Body1', 'model/CamposProposta', 'model/Error', 'model/ErrorValidation', 'model/InlineResponse200', 'model/InlineResponse2001', 'model/InlineResponse2002', 'model/InlineResponse2003', 'model/InlineResponse2004', 'model/InlineResponse2005', 'model/InlineResponse2009', 'model/InlineResponse201'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/Body1'), require('../model/CamposProposta'), require('../model/Error'), require('../model/ErrorValidation'), require('../model/InlineResponse200'), require('../model/InlineResponse2001'), require('../model/InlineResponse2002'), require('../model/InlineResponse2003'), require('../model/InlineResponse2004'), require('../model/InlineResponse2005'), require('../model/InlineResponse2009'), require('../model/InlineResponse201'));
  } else {
    // Browser globals (root is window)
    if (!root.ApiCrditoPessoalDemo) {
      root.ApiCrditoPessoalDemo = {};
    }
    root.ApiCrditoPessoalDemo.PropostasApi = factory(root.ApiCrditoPessoalDemo.ApiClient, root.ApiCrditoPessoalDemo.Body1, root.ApiCrditoPessoalDemo.CamposProposta, root.ApiCrditoPessoalDemo.Error, root.ApiCrditoPessoalDemo.ErrorValidation, root.ApiCrditoPessoalDemo.InlineResponse200, root.ApiCrditoPessoalDemo.InlineResponse2001, root.ApiCrditoPessoalDemo.InlineResponse2002, root.ApiCrditoPessoalDemo.InlineResponse2003, root.ApiCrditoPessoalDemo.InlineResponse2004, root.ApiCrditoPessoalDemo.InlineResponse2005, root.ApiCrditoPessoalDemo.InlineResponse2009, root.ApiCrditoPessoalDemo.InlineResponse201);
  }
}(this, function(ApiClient, Body1, CamposProposta, Error, ErrorValidation, InlineResponse200, InlineResponse2001, InlineResponse2002, InlineResponse2003, InlineResponse2004, InlineResponse2005, InlineResponse2009, InlineResponse201) {
  'use strict';

  /**
   * Propostas service.
   * @module api/PropostasApi
   * @version 1.0.0
   */

  /**
   * Constructs a new PropostasApi. 
   * @alias module:api/PropostasApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the propostasPost operation.
     * @callback module:api/PropostasApi~propostasPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse201} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Inclui uma proposta de crédito.
     * @param {String} clientId 
     * @param {module:model/CamposProposta} body 
     * @param {module:api/PropostasApi~propostasPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse201}
     */
    this.propostasPost = function(clientId, body, callback) {
      var postBody = body;

      // verify the required parameter 'clientId' is set
      if (clientId === undefined || clientId === null) {
        throw new Error("Missing the required parameter 'clientId' when calling propostasPost");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling propostasPost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'client_id': clientId
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = InlineResponse201;

      return this.apiClient.callApi(
        '/propostas', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the propostasPropostaCondicoesGet operation.
     * @callback module:api/PropostasApi~propostasPropostaCondicoesGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2004} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retorna o texto das condições da operação
     * @param {String} clientId 
     * @param {Number} proposta Número da proposta
     * @param {module:api/PropostasApi~propostasPropostaCondicoesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse2004}
     */
    this.propostasPropostaCondicoesGet = function(clientId, proposta, callback) {
      var postBody = null;

      // verify the required parameter 'clientId' is set
      if (clientId === undefined || clientId === null) {
        throw new Error("Missing the required parameter 'clientId' when calling propostasPropostaCondicoesGet");
      }

      // verify the required parameter 'proposta' is set
      if (proposta === undefined || proposta === null) {
        throw new Error("Missing the required parameter 'proposta' when calling propostasPropostaCondicoesGet");
      }


      var pathParams = {
        'proposta': proposta
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'client_id': clientId
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = InlineResponse2004;

      return this.apiClient.callApi(
        '/propostas/{proposta}/condicoes', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the propostasPropostaDocumentosGet operation.
     * @callback module:api/PropostasApi~propostasPropostaDocumentosGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/InlineResponse2005>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retonar os documentos salvos relacionados a proposta
     * @param {String} clientId 
     * @param {Number} proposta Número da proposta que deseja consultar
     * @param {module:api/PropostasApi~propostasPropostaDocumentosGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/InlineResponse2005>}
     */
    this.propostasPropostaDocumentosGet = function(clientId, proposta, callback) {
      var postBody = null;

      // verify the required parameter 'clientId' is set
      if (clientId === undefined || clientId === null) {
        throw new Error("Missing the required parameter 'clientId' when calling propostasPropostaDocumentosGet");
      }

      // verify the required parameter 'proposta' is set
      if (proposta === undefined || proposta === null) {
        throw new Error("Missing the required parameter 'proposta' when calling propostasPropostaDocumentosGet");
      }


      var pathParams = {
        'proposta': proposta
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'client_id': clientId
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [InlineResponse2005];

      return this.apiClient.callApi(
        '/propostas/{proposta}/documentos', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the propostasPropostaDocumentosPost operation.
     * @callback module:api/PropostasApi~propostasPropostaDocumentosPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Faz o upload de algum documento da operação
     * @param {String} clientId 
     * @param {Number} proposta Número da proposta onde o documento será anexado
     * @param {module:model/Body1} body 
     * @param {module:api/PropostasApi~propostasPropostaDocumentosPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.propostasPropostaDocumentosPost = function(clientId, proposta, body, callback) {
      var postBody = body;

      // verify the required parameter 'clientId' is set
      if (clientId === undefined || clientId === null) {
        throw new Error("Missing the required parameter 'clientId' when calling propostasPropostaDocumentosPost");
      }

      // verify the required parameter 'proposta' is set
      if (proposta === undefined || proposta === null) {
        throw new Error("Missing the required parameter 'proposta' when calling propostasPropostaDocumentosPost");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling propostasPropostaDocumentosPost");
      }


      var pathParams = {
        'proposta': proposta
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'client_id': clientId
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/propostas/{proposta}/documentos', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the propostasPropostaEfetivacaoPatch operation.
     * @callback module:api/PropostasApi~propostasPropostaEfetivacaoPatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2009} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Efetiva uma proposta de crédito (Ato de gerar contrato).
     * @param {String} clientId 
     * @param {Number} proposta Número da proposta que deseja efetivar
     * @param {module:api/PropostasApi~propostasPropostaEfetivacaoPatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse2009}
     */
    this.propostasPropostaEfetivacaoPatch = function(clientId, proposta, callback) {
      var postBody = null;

      // verify the required parameter 'clientId' is set
      if (clientId === undefined || clientId === null) {
        throw new Error("Missing the required parameter 'clientId' when calling propostasPropostaEfetivacaoPatch");
      }

      // verify the required parameter 'proposta' is set
      if (proposta === undefined || proposta === null) {
        throw new Error("Missing the required parameter 'proposta' when calling propostasPropostaEfetivacaoPatch");
      }


      var pathParams = {
        'proposta': proposta
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'client_id': clientId
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = InlineResponse2009;

      return this.apiClient.callApi(
        '/propostas/{proposta}/efetivacao', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the propostasPropostaGet operation.
     * @callback module:api/PropostasApi~propostasPropostaGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CamposProposta} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Consulta uma proposta pelo número, retornando todos os seus dados
     * @param {String} clientId 
     * @param {Number} proposta Número da proposta que deseja consultar
     * @param {module:api/PropostasApi~propostasPropostaGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CamposProposta}
     */
    this.propostasPropostaGet = function(clientId, proposta, callback) {
      var postBody = null;

      // verify the required parameter 'clientId' is set
      if (clientId === undefined || clientId === null) {
        throw new Error("Missing the required parameter 'clientId' when calling propostasPropostaGet");
      }

      // verify the required parameter 'proposta' is set
      if (proposta === undefined || proposta === null) {
        throw new Error("Missing the required parameter 'proposta' when calling propostasPropostaGet");
      }


      var pathParams = {
        'proposta': proposta
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'client_id': clientId
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = CamposProposta;

      return this.apiClient.callApi(
        '/propostas/{proposta}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the propostasPropostaOfertasIdOfertaSelecaoPut operation.
     * @callback module:api/PropostasApi~propostasPropostaOfertasIdOfertaSelecaoPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2002} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Atualiza a proposta com a oferta selecionada.
     * @param {String} clientId 
     * @param {Number} proposta Número da proposta que deseja alterar
     * @param {Number} idOferta Id da oferta com que deseja prosseguir
     * @param {module:api/PropostasApi~propostasPropostaOfertasIdOfertaSelecaoPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse2002}
     */
    this.propostasPropostaOfertasIdOfertaSelecaoPut = function(clientId, proposta, idOferta, callback) {
      var postBody = null;

      // verify the required parameter 'clientId' is set
      if (clientId === undefined || clientId === null) {
        throw new Error("Missing the required parameter 'clientId' when calling propostasPropostaOfertasIdOfertaSelecaoPut");
      }

      // verify the required parameter 'proposta' is set
      if (proposta === undefined || proposta === null) {
        throw new Error("Missing the required parameter 'proposta' when calling propostasPropostaOfertasIdOfertaSelecaoPut");
      }

      // verify the required parameter 'idOferta' is set
      if (idOferta === undefined || idOferta === null) {
        throw new Error("Missing the required parameter 'idOferta' when calling propostasPropostaOfertasIdOfertaSelecaoPut");
      }


      var pathParams = {
        'proposta': proposta,
        'id-oferta': idOferta
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'client_id': clientId
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = InlineResponse2002;

      return this.apiClient.callApi(
        '/propostas/{proposta}/ofertas/{id-oferta}/selecao', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the propostasPropostaPendenciasGet operation.
     * @callback module:api/PropostasApi~propostasPropostaPendenciasGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2003} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Consulta as pendências de uma proposta que a impedem de ser efetivada
     * @param {String} clientId 
     * @param {Number} proposta Número da proposta que deseja consultar
     * @param {module:api/PropostasApi~propostasPropostaPendenciasGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse2003}
     */
    this.propostasPropostaPendenciasGet = function(clientId, proposta, callback) {
      var postBody = null;

      // verify the required parameter 'clientId' is set
      if (clientId === undefined || clientId === null) {
        throw new Error("Missing the required parameter 'clientId' when calling propostasPropostaPendenciasGet");
      }

      // verify the required parameter 'proposta' is set
      if (proposta === undefined || proposta === null) {
        throw new Error("Missing the required parameter 'proposta' when calling propostasPropostaPendenciasGet");
      }


      var pathParams = {
        'proposta': proposta
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'client_id': clientId
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = InlineResponse2003;

      return this.apiClient.callApi(
        '/propostas/{proposta}/pendencias', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the propostasPropostaPut operation.
     * @callback module:api/PropostasApi~propostasPropostaPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Altera uma proposta de crédito. Postar apenas os campos que serão alterados.
     * @param {String} clientId 
     * @param {Number} proposta Número da proposta que deseja alterar
     * @param {module:model/CamposProposta} body 
     * @param {module:api/PropostasApi~propostasPropostaPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse200}
     */
    this.propostasPropostaPut = function(clientId, proposta, body, callback) {
      var postBody = body;

      // verify the required parameter 'clientId' is set
      if (clientId === undefined || clientId === null) {
        throw new Error("Missing the required parameter 'clientId' when calling propostasPropostaPut");
      }

      // verify the required parameter 'proposta' is set
      if (proposta === undefined || proposta === null) {
        throw new Error("Missing the required parameter 'proposta' when calling propostasPropostaPut");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling propostasPropostaPut");
      }


      var pathParams = {
        'proposta': proposta
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'client_id': clientId
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = InlineResponse200;

      return this.apiClient.callApi(
        '/propostas/{proposta}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the propostasPropostaStatusGet operation.
     * @callback module:api/PropostasApi~propostasPropostaStatusGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2001} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Consulta a situação de uma proposta pelo número, retornando a situação corrente e dados adicionais de acordo com a situação [BAD PRACTICE RISK &#x3D;&gt; POOLING]
     * @param {String} clientId 
     * @param {Number} proposta Número da proposta que deseja consultar
     * @param {module:api/PropostasApi~propostasPropostaStatusGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse2001}
     */
    this.propostasPropostaStatusGet = function(clientId, proposta, callback) {
      var postBody = null;

      // verify the required parameter 'clientId' is set
      if (clientId === undefined || clientId === null) {
        throw new Error("Missing the required parameter 'clientId' when calling propostasPropostaStatusGet");
      }

      // verify the required parameter 'proposta' is set
      if (proposta === undefined || proposta === null) {
        throw new Error("Missing the required parameter 'proposta' when calling propostasPropostaStatusGet");
      }


      var pathParams = {
        'proposta': proposta
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'client_id': clientId
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = InlineResponse2001;

      return this.apiClient.callApi(
        '/propostas/{proposta}/status', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
